Directiory Structure:
	ms/{regular, fasttrack, transfer}/list_of_track in each folder/{logic files}


Content:

ms/ 			-degree plans for masters of sciences in computer science
transcripts/	-Some example transcripts in the specified .csv format
readme.txt			-this README file
counting.lp		-file that has rules to calculate credit hours.
course.lp		-file that contains every class in the system.
main_StudentName.lp			-file conatining sASP code for Student.
main_writer.py		-Python script that generates main_StudentName.lp
util.py 		- file containing utility function.
drk170130_hxb162230_Final_Report.pdf - pdf report file.

How To Run an Audit:

Example transcripts are included in transcripts/ folders. 

To run an audit, you must use main_writer.py and pass in a transcript file to create a main_StudentName.lp file which will be executed by s(ASP). Run this command in the terminal:

		python main_writer.py transcripts/dhwani.csv
		
This will use transcripts/dhwani.csv to build main_dhwani.lp, which can in turn be executed by s(ASP). Once the main_dhwani.lp file is created run this command in the terminal:
		
		sasp main_dhwani.lp

This will run the audit and provide appropriate advising information.

Required files to run the program for a student.
1. main_studentName.lp contains the entry point ?_main(dhwani).

2. <category>_<track>_rules.lp
	file contains the rule based on the category of the track.
	List of predicate in the file:
		canGraduate(Student):
			true if student can graduate.
		_suggestionToGraduate(Student):
			true if some courses needs to be taken.
		_main(Student):
			entry point.

3. <category>_<track>_grad.lp
	file contains the rule to decide if student can graduate or not.
	List of predicate:
		_takenCoreCourses(Student):
			true if students meets all the required core courses.
		_meetPreReqCourses(Student):
			true if students meets all the prerequistive courses.

4. <category>_<track>_req.lp
	_req(Course,Req): 
		Req is required for core.
		Req is elective for non core subject e.g prerequisite and non core.
		this fact is based on track requirnments.

5. <category>_<track>_req2.lp
	_req(Course,elective): 
		contains all the subjects from course book excluding core for track.

6. <category>_<track>_sugg.lp
	_suggestReqCourses(Student):
		unifies if student hasn't taken any of the core course.

	_suggestPreReqCourses(Student):
		unifies if student hasn't taken any of the prerequisite course.

7. counting.lp
	_hasTaken(Student,Course).
		This predicate is automatically generated by automation script as a fact from the CSV transcript. It denotes that "Student has taken this Course".
	
	hasNotTaken(Student,Course).
		This predicate encodes CWA. If we donâ€™t know that student has taken this course, this predicate is true.
	
	_t(Student,Course).
		This predicate creates an even loop so that it will always be true regardless whether or not the student has taken the course. If the student has not taken the course, the answer set will show the hasNotTaken predicate in the answer set. If the student has taken the course, it will hide the _hasTaken and _t predicates. 
	
	_meetsHours(Student,Req,Min)
		This predicate will count the amount of credit hours a Student has taken of a certain Req and will be true if the amount of credit hours is greater than the Min. 

	_auditHours(Student,Req,Min).
		Semantic of this is same as meetsHours except it will always be true and if the total hours is less than the Min, needsHours(Student,Req,Diff) will appear in the answer set, with Diff as the hours needed in the requirement.


Flow of Logic Program:

1. If transcript is complete and student can graduate
		_main(Student) predicate matches with canGradute(Student) predicate in rules.lp file of corresponding track.

		canGradute(Student) unifies to true only if 
			_takenCoreCourses(Student),
			_meetPreReqCourses(Student),
			_meetsHours(Student,required,15),
			_meetsHours(Student,elective,18) are true.

2. If transcript is partial and student cann't graduate,
		_main(Student) predicate matches with _suggestionToGraduate(Student) predicate in rules.lp file of corresponding track.

		_suggestionToGraduate(Student) internally calls 
			_suggestReqCourses(Student),
			_suggestPreReqCourses(Student),
			_auditHours(Student,required,15),
			_auditHours(Student,elective,18) to come up with plan.

Sample runs :
1. with the existing transcript dhwani.csv output of the command 
		python main_writer.py ./transcript/dhwani.csv

would generate main_dhwani.lp and output of the system main call
		sasp main_dhwani.lp 

output: 
{ hasNotTaken(dhwani,cs5303), hasNotTaken(dhwani,cs6313), hasNotTaken(dhwani,cs6332), needsHours(dhwani,elective,6), needsHours(dhwani,required,3) }

2. with the existing transcript hardik.csv output of the command 
		python main_writer.py ./transcript/hardik.csv

would generate main_hardik.lp and output of the system main call
		sasp main_hardik.lp 

output: 
{ canGraduate(hardik) }
			


